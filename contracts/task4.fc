#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

const int INF = (1 << (30 + 10));

forall X -> int is_null? (X x) asm "ISNULL";

forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";

forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

forall X -> (tuple) to_tuple (X x) asm "NOP";

forall X -> (tuple, ()) ~set_index_var2(tuple t, X value, int i) asm "SETINDEXVAR";

forall X -> (tuple) new_tuple_of(X value, int size) asm """
DUP 1 SETGLOB DEC
REPEAT:<{
    DUP
}>
1 GETGLOB
TUPLEVAR
""";

forall X -> (tuple, ()) ~set_index_var(tuple t, int i, int j, X value) asm """
s3 s2 PUSH2
INDEXVAR 
s2 XCHG0
SETINDEXVAR
SWAP SETINDEXVAR
""";


(int) wrap_distance(int d, int x, int y) asm(y d x) """
5 LSHIFT#
ROTREV 10 LSHIFT#
ADD ADD
""";

(int, int, int) unwrap_distance(int t) asm """
DUP 10 RSHIFT# SWAP
DUP 5 RSHIFT# 31 PUSHINT AND SWAP
31 PUSHINT AND
""";

(int, tuple, tuple, int) get_list(tuple d, int d_size, int min_d) inline asm """
PUSHNULL PUSHNULL 40 PUSHPOW2DEC 
1 5 BLKSWAP     // d_size - min_d - temp - ans - next_min_d - d
s5 PUSH REPEAT:<{
    UNCONS      // td
    DUP 10 RSHIFT# DUP s7 PUSH GREATER // td >> 10
    IF:<{
        1 3 BLKSWAP MIN 2 1 BLKSWAP
        1 4 BLKSWAP SWAP CONS 3 1 BLKSWAP
    }>ELSE<{
        DROP
        1 3 BLKSWAP SWAP CONS 2 1 BLKSWAP
        1 5 BLKSWAP DEC 5 1 BLKSWAP
    }>
}>
DROP 1 3 BLKSWAP DROP // d_size - temp - ans - next_min_d
""";

(tuple, int, int, tuple) extract(tuple d, int d_size, int min_d) inline {
    tuple temp = null();
    tuple ans = null();
    int next_min_d = INF;

    repeat(d_size) {
        int td = d~pop_back();
        int cost =  td >> 10;
        if (cost > min_d) {
            temp~push_back(td);
            next_min_d = min(next_min_d, cost);
        }
        else {
            ans~push_back(td);
            d_size -= 1;
        }
    }

    return (temp, d_size, next_min_d, ans);
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    ;; start node
    int sx = 0;
    int sy = 0;

    ;; end node
    int ex = 0;
    int ey = 0;
    
    
    int i = 0;
    int j = 0;
    repeat(n) {
        j = 0 ;
        repeat(m) {

            int value = maze.at(i).at(j);

            if (value == 83) {
                sx = i;
                sy = j;
                
                ;; when you change this remember to change repeat 8 by 4
                tuple dx = to_tuple([1, 1, -1, -1, 1, 0, -1, 0]);
                tuple dy = to_tuple([1, -1, 1, -1, 0, 1, 0, -1]);
                ;; tuple dx = to_tuple([1, 0, -1, 0]);
                ;; tuple dy = to_tuple([0, 1, 0, -1]);

                int cost = 0;
                int x = -1;
                int y = -1;
                tuple d = null();
                int d_size = 0;
                tuple d2 = null();
                int d2_size = 0;
                tuple d3 = null();
                int d3_size = 0;
                tuple d4 = null();
                int d4_size = 0;
                int min_d = INF;
                tuple t = new_tuple_of(new_tuple_of(INF, m), n);
                tuple list = null();

                t~set_index_var(sx, sy, 0);
                list~push_back(wrap_distance(0, sx, sy));

                repeat(n * m) {

                    if (list.is_null?()) {
                        ;; tuple temp = null();
                        ;; int next_min_d = INF;

                        ;; repeat(d_size) {
                        ;;     int td = d~pop_back();
                        ;;     int cost =  td >> 10;
                        ;;     if (cost > min_d) {
                        ;;         temp~push_back(td);
                        ;;         next_min_d = min(next_min_d, cost);
                        ;;     }
                        ;;     else {
                        ;;         list~push_back(td);
                        ;;         d_size -= 1;
                        ;;     }
                        ;; }
                        
                        ;; d = temp;
                        ;; min_d = next_min_d;
                        if (d_size > 0) {
                            (d, d_size, min_d, list) = d.extract(d_size, min_d);
                        }
                        elseif (d2_size > 0){
                            (d2, d2_size, min_d, list) = d2.extract(d2_size, min_d);
                        }
                        elseif (d3_size > 0) {
                            (d3, d3_size, min_d, list) = d3.extract(d3_size, min_d);
                        }
                        else {
                            (d4, d4_size, min_d, list) = d4.extract(d4_size, min_d);
                        }
                        ;; (d_size, d, list, min_d) = d.get_list(d_size, min_d);
                    }

                    (cost, x, y) = unwrap_distance(list~pop_back());

                    if (maze.at(x).at(y) == 69) {
                        repeat((cost & 0x3FF) - 1) {
                            (_, x, y) = unwrap_distance(t.at(x).at(y));
                            maze~set_index_var(x, y, 33);
                        }

                        return (
                            cost >> 20,
                            (cost >> 10) & 0x3FF,
                            cost & 0x3FF,
                            maze
                        );
                    }
                    
                    i = 0;
                    repeat(8) {
                        int nx = x + dx.at(i);
                        int ny = y + dy.at(i);

                        if ((0 <= nx) & (nx < n) & (0 <= ny) & (ny < m)) {
                            int target_cost = t.at(nx).at(ny) >> 10;
                            int new_cost = cost + 1;
                            int value = maze.at(nx).at(ny);

                            if (value == 63) {
                                new_cost += (1 << 10);
                            }
                            elseif (value == 88) {
                                new_cost += (1 << 20);
                            }

                            if (target_cost > new_cost) {
                                t~set_index_var(nx, ny, wrap_distance(new_cost, x, y));
                                if (new_cost < 30) {
                                    d~push_back(wrap_distance(new_cost, nx, ny));
                                    d_size += 1;
                                }
                                elseif (new_cost < (1 << 10)) {
                                    d2~push_back(wrap_distance(new_cost, nx, ny));
                                    d2_size += 1;
                                }
                                elseif (new_cost < (1 << 20)) {
                                    d3~push_back(wrap_distance(new_cost, nx, ny));
                                    d3_size += 1;
                                }
                                else {
                                    d4~push_back(wrap_distance(new_cost, nx, ny));
                                    d4_size += 1;
                                }
                                min_d = min(min_d, new_cost);
                            }
                        }

                        i += 1;
                    }
                }
            }

            j += 1;
        }
        i += 1;
    }


    return (0, 0, 0, null());
}

() test_solve() method_id {
    tuple t1 = to_tuple([83, 46, 88, 88, 46]);
    tuple t2 = to_tuple([46, 46, 63, 46, 63]);
    tuple t3 = to_tuple([88, 88, 63, 88, 88]);
    tuple t4 = to_tuple([46, 88, 63, 88, 69]);
    tuple t = to_tuple([t1, t2, t3, t4]);
    (int a, int b, int c, tuple maze) = solve(4, 5, t);
    ~dump(a);
    ~dump(b);
    ~dump(c);
    ~dump(maze);
}