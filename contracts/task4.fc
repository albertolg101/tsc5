#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

const int INF = (1 << 30);

forall X -> (tuple) to_tuple (X x) asm "NOP";

forall X -> (tuple) new_tuple_of(X value, int size) asm """
DUP 1 SETGLOB DEC
REPEAT:<{
    DUP
}>
1 GETGLOB
TUPLEVAR
""";

forall X -> (tuple, ()) ~set_index_var(tuple t, int i, int j, X value) asm """
s3 s2 PUSH2
INDEXVAR 
s2 XCHG0
SETINDEXVAR
SWAP SETINDEXVAR
""";

(int) get_cost(int value) inline {
    if (value == 63) {
        return (1 << 10) + 1;
    }
    elseif (value == 88) {
        return (1 << 20) + 1;
    }
    
    return 1;
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
;; (int, int, int, tuple) solve() method_id {
    ;; int n = 2;
    ;; int m = 3;
    ;; tuple t1 = to_tuple([83, 88, 69]);
    ;; tuple t2 = to_tuple([63, 88, 88]);
    ;; tuple maze = to_tuple([t1, t2]);

    ;; start node
    int sx = 0;
    int sy = 0;

    ;; end node
    int ex = 0;
    int ey = 0;
    
    ;; parent
    tuple p = new_tuple_of(new_tuple_of(INF, m), n);
    ;; distance
    tuple d = p;
    ;; visited
    tuple flag = p;

    int i = 0;
    int j = 0;
    while ( i < n ) {
        j = 0 ;
        while ( j < m ) {

            int value = maze.at(i).at(j);

            if (value == 83) {
                sx = i;
                sy = j;
            }

            elseif (value == 69) {
                ex = i;
                ey = j;
            }

            j += 1;
        }
        i += 1;
    }

    d~set_index_var(sx, sy, 0);

    tuple dx = to_tuple([1, 0, -1, 0, 1, 1, -1, -1]);
    tuple dy = to_tuple([0, 1, 0, -1, 1, -1, 1, -1]);

    int k = 0;

    while ( k < (n * m) ) {
        int x = -1;
        int y = -1;
        
        i = 0;
        while ( i < n ) {
            j = 0;
            while ( j < m ) {
        
                if (flag.at(i).at(j) == INF) {
                    if ( x == -1 ) {
                        (x, y) = (i, j);
                    } 
                    elseif ( d.at(x).at(y) > d.at(i).at(j) ) {
                        (x, y) = (i, j);
                    }
                }

                j += 1;
            }
            i += 1;
        }

        i = 0;

        if (d.at(x).at(y) == INF) {
            k = n * m;
            i = 8;
            ;; break
        }

        flag~set_index_var(x, y, 0);

        while ( i < 8 ) {
            int nx = x + dx.at(i);
            int ny = y + dy.at(i);

            if ((0 <= nx) & (nx < n) & (0 <= ny) & (ny < m)) {
                int cost = maze.at(nx).at(ny).get_cost();

                if (d.at(nx).at(ny) > d.at(x).at(y) + cost) {
                    d~set_index_var(nx, ny, d.at(x).at(y) + cost);
                    p~set_index_var(nx, ny, (x << 5) + y);
                }
            }

            i += 1;
        }

        k += 1;
    }

    int cost = d.at(ex).at(ey);
    int parent = p.at(ex).at(ey);
    int x = parent >> 5;
    int y = parent & 0x1F;

    while ((x != sx) | (y != sy)) {
        maze~set_index_var(x, y, 33);
        parent = p.at(x).at(y);
        x = parent >> 5;
        y = parent & 0x1F;
    }

    return (
        cost >> 20,
        (cost >> 10) & 0x3FF,
        cost & 0x3FF,
        maze
    );
}