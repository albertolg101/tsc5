#include "imports/stdlib.fc";

int get_total_share(cell dict) inline {
    int total_share = 0;

    (int key, slice val, int flag) = dict.udict_get_min?(256);

    while (flag) {

        total_share += val~load_uint(32);    

        (key, val, flag) = dict.udict_get_next?(256, key);
    }    

    return total_share;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    int op = in_msg_body~load_uint(32);

    slice storage = get_data().begin_parse();
    slice admin = storage~load_msg_addr();
    cell dict = storage~load_dict();

    ;; add user
    if (op == 0x368ddef3) {
        (_, slice sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();
        throw_if(120, sender.skip_bits(11).preload_uint(256) != admin.skip_bits(11).preload_uint(256));

        in_msg_body~skip_bits(64);
        int addr = in_msg_body~load_msg_addr().skip_bits(11).preload_uint(256);
        slice share = begin_cell()
            .store_uint(in_msg_body~load_uint(32), 32)
            .end_cell()
            .begin_parse();

        dict~udict_set(256, addr, share);

        set_data(begin_cell()
            .store_slice(admin)
            .store_dict(dict)
            .end_cell());
    }

    ;; remove user
    elseif (op == 0x278205c8) {
        (_, slice sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();
        throw_if(120, sender.skip_bits(11).preload_uint(256) != admin.skip_bits(11).preload_uint(256));

        in_msg_body~skip_bits(64);
        int addr = in_msg_body~load_msg_addr().skip_bits(11).preload_uint(256);

        throw_unless(121, dict~udict_delete?(256, addr));

        set_data(begin_cell()
            .store_slice(admin)
            .store_dict(dict)
            .end_cell());
    }

    ;; split
    elseif (op == 0x68530b3) {
        (int key, slice val, int flag) = dict.udict_get_min?(256);
        throw_unless(122, flag);

        int total_share = dict.get_total_share();

        while (flag) {
            
            slice receiver = begin_cell()
                .store_uint(0x400, 11)
                .store_uint(key, 256)
                .end_cell()
                .begin_parse();

            send_raw_message(
                begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(receiver)
                    .store_coins(val.preload_uint(32) * msg_value / total_share)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .end_cell(), 
                1);

            (key, val, flag) = dict.udict_get_next?(256, key);
        }
    }

    ;; transfer notification
    elseif (op == 0x7362d09c) {
        throw_if(122, dict.dict_empty?());
    }
}

cell get_users() method_id {
    slice storage = get_data().begin_parse();
    _ = storage~load_msg_addr();
    return storage~load_dict();
}

int get_user_share(slice user_address) method_id {
    int index = user_address~load_msg_addr().skip_bits(11).preload_uint(256);
    (slice share, _) = get_users().udict_get?(256, index);
    return share.preload_uint(32);
}