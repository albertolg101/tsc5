#include "imports/stdlib.fc";

cell get_storage() inline {
    return get_data().begin_parse().preload_ref();
}

cell wrap_storage(int version_id, cell storage) inline {
    return begin_cell()
        .store_uint(version_id, 32)
        .store_ref(storage)
    .end_cell();
}

;; Return the current version of the smart contract
int version() method_id {
    return get_data().begin_parse().preload_uint(32);
}

;; <<<<<
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    return storage;
}

cell migrate_one(cell old_storage) {
    return old_storage;
}
;; >>>>>

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    int expected_version = in_msg_body~load_uint(32); ;; Load the expected version
    ;; cell code = in_msg_body~load_maybe_ref(); ;; Load the expected code
    ;; cell migrations = in_msg_body~load_dict(); ;; Load migrations
    ;; cell payload = in_msg_body~load_ref();

    if (expected_version == 0) {
        set_data(
            begin_cell()
                .store_uint(1, 32)
                .store_ref(
                    begin_cell()
                    .end_cell()
                )
            .end_cell()
        );

        return ();
    }

    int actual_version = version();
    if (version() < expected_version) {
        throw_if(200, code.cell_null?());

        ;; int v = actual_version;
        ;; while(v < expected_version) {
        ;;     (slice val, int flag) = migrations.udict_get?(32, v);
        ;;     throw_unless(400, flag);
        ;;     v = val.preload_uint(32);
        ;; }

        ;; throw_if(400, v != expected_version);

        ;; cell storage = get_storage();
        ;; while (actual_version < expected_version) {
        ;;     (slice val, _) = migrations.udict_get?(32, actual_version);
        ;;     actual_version = val.preload_uint(32);
        ;;     set_c3(val.preload_ref().begin_parse().bless());
        ;;     storage = migrate_one(storage);
        ;; }
        ;; wrap_storage(actual_version, storage);

        ;; set_code(code);
        ;; set_c3(code.begin_parse().bless());
    }
    
    ;; cell storage = process_message(get_storage(), msg_value, balance, in_msg_full, payload.begin_parse());
    ;; set_data(wrap_storage(actual_version, storage));
}