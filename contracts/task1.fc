#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

() recv_external(slice in_msg) impure {
    if (in_msg.slice_bits() < 32) {
        return ();
    }

    int op = in_msg~load_uint(32);

    slice storage = get_data().begin_parse();
    
    int public_key = storage~load_uint(256);
    int execution_time = storage~load_uint(32);
    slice receiver = storage~load_msg_addr();
    int seqno = storage~load_uint(32);

    if (op == 0x9df10277) 
    {
        in_msg~skip_bits(64);
        slice in_msg_body = in_msg~load_ref().begin_parse();
        int in_msg_body_hash = in_msg_body.slice_hash();
        int locked_for = in_msg_body~load_uint(32);
        int new_seqno = in_msg_body~load_uint(32);

        throw_if(119, seqno + 1 != new_seqno);
        throw_unless(120, check_signature(in_msg_body_hash, in_msg, public_key));
        throw_if(121, locked_for <= 0);
        throw_if(122, execution_time < now());
        throw_if(123, now() + locked_for < execution_time);
        accept_message();

        cell new_data = begin_cell()
            .store_uint(public_key, 256)
            .store_uint(now() + locked_for, 32)
            .store_slice(receiver)
            .store_uint(new_seqno, 32)
            .end_cell();

        set_data(new_data);
    }
    elseif (op == 0xbb4be234) 
    {
        throw_unless(124, execution_time < now());

        ;; cell msg = begin_cell()
        ;;     .store_uint(0x18, 6)
        ;;     .store_slice(receiver)
        ;;     .store_coins(0)
        ;;     .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        ;; .end_cell();

        ;; send_raw_message(msg, 128);
    }
}

(int) get_seqno() method_id {
    slice storage = get_data().begin_parse();
    return storage.slice_last(32).preload_uint(32);
}

(int) get_execution_time() method_id {
    slice storage = get_data().begin_parse();
    return storage.skip_bits(256).preload_uint(32);
}